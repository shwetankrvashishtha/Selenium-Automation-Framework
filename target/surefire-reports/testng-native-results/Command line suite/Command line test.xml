<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="Shwetanks-Air" ignored="0" name="Command line test" tests="4" failures="0" timestamp="08 Feb 2018 16:33:01 GMT" time="0.114" errors="0">
  <testcase name="@BeforeClass openTest" time="0.089" classname="tests.ModuleOneTest">
    <failure type="java.lang.IllegalStateException" message="The driver executable does not exist: /Applications/new folder/Code Hub/Eclipse Workspace/Selenium-Automation-Framework/./lib/drivers/chromedriver">
      <![CDATA[java.lang.IllegalStateException: The driver executable does not exist: /Applications/new folder/Code Hub/Eclipse Workspace/Selenium-Automation-Framework/./lib/drivers/chromedriver
at com.google.common.base.Preconditions.checkState(Preconditions.java:585)
at org.openqa.selenium.remote.service.DriverService.checkExecutable(DriverService.java:136)
at org.openqa.selenium.remote.service.DriverService.findExecutable(DriverService.java:131)
at org.openqa.selenium.chrome.ChromeDriverService.access$000(ChromeDriverService.java:32)
at org.openqa.selenium.chrome.ChromeDriverService$Builder.findDefaultExecutable(ChromeDriverService.java:137)
at org.openqa.selenium.remote.service.DriverService$Builder.build(DriverService.java:339)
at org.openqa.selenium.chrome.ChromeDriverService.createDefaultService(ChromeDriverService.java:88)
at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:123)
at functionalLib.TestBase.setupBrowser(TestBase.java:58)
at tests.ModuleOneTest.openTest(ModuleOneTest.java:22)
... Removed 36 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeClass openTest -->
  <testcase name="@AfterMethod takeScreenshotOnFailure" time="0.0" classname="tests.ModuleOneTest">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenshotOnFailure -->
  <testcase name="@AfterMethod takeScreenshotOnFailure" time="0.0" classname="tests.ModuleOneTest">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenshotOnFailure -->
  <testcase name="@AfterMethod takeScreenshotOnFailure" time="0.0" classname="tests.ModuleOneTest">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenshotOnFailure -->
  <testcase name="@AfterClass closeTest" time="0.0" classname="tests.ModuleOneTest">
    <skipped/>
  </testcase> <!-- @AfterClass closeTest -->
  <testcase name="TCID_1" time="0.0" classname="tests.ModuleOneTest">
    <skipped/>
  </testcase> <!-- TCID_1 -->
  <testcase name="TCID_2" time="0.0" classname="tests.ModuleOneTest">
    <skipped/>
  </testcase> <!-- TCID_2 -->
  <testcase name="TCID_3" time="0.0" classname="tests.ModuleOneTest">
    <skipped/>
  </testcase> <!-- TCID_3 -->
  <testcase name="TCID_3" time="0.0" classname="tests.ModuleOneTest">
    <skipped/>
  </testcase> <!-- TCID_3 -->
</testsuite> <!-- Command line test -->
